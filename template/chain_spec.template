use cumulus_primitives_core::ParaId;
use parachain_magnet_runtime::{AccountId, AuraId, Signature, EXISTENTIAL_DEPOSIT};
use sc_chain_spec::{ChainSpecExtension, ChainSpecGroup};
use sc_service::ChainType;
use serde::{Deserialize, Serialize};
use sp_core::{crypto::Ss58Codec, sr25519, Pair, Public, H160, U256};
use sp_runtime::traits::{IdentifyAccount, Verify};
use sp_runtime::AccountId32;
use sp_std::marker::PhantomData;
use std::{collections::BTreeMap, str::FromStr};

/// Specialized `ChainSpec` for the normal parachain runtime.
pub type ChainSpec =
	sc_service::GenericChainSpec<parachain_magnet_runtime::RuntimeGenesisConfig, Extensions>;

/// The default XCM version to set in genesis config.
const SAFE_XCM_VERSION: u32 = xcm::prelude::XCM_VERSION;

/// Helper function to generate a crypto pair from seed
pub fn get_from_seed<TPublic: Public>(seed: &str) -> <TPublic::Pair as Pair>::Public {
	TPublic::Pair::from_string(&format!("//{}", seed), None)
		.expect("static values are valid; qed")
		.public()
}

/// The extensions for the [`ChainSpec`].
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, ChainSpecGroup, ChainSpecExtension)]
#[serde(deny_unknown_fields)]
pub struct Extensions {
	/// The relay chain of the Parachain.
	pub relay_chain: String,
	/// The id of the Parachain.
	pub para_id: u32,
}

impl Extensions {
	/// Try to get the extension from the given `ChainSpec`.
	pub fn try_get(chain_spec: &dyn sc_service::ChainSpec) -> Option<&Self> {
		sc_chain_spec::get_extension(chain_spec.extensions())
	}
}

type AccountPublic = <Signature as Verify>::Signer;

/// Generate collator keys from seed.
///
/// This function's return type must always match the session keys of the chain in tuple format.
pub fn get_collator_keys_from_seed(seed: &str) -> AuraId {
	get_from_seed::<AuraId>(seed)
}

/// Helper function to generate an account ID from seed
pub fn get_account_id_from_seed<TPublic: Public>(seed: &str) -> AccountId
where
	AccountPublic: From<<TPublic::Pair as Pair>::Public>,
{
	AccountPublic::from(get_from_seed::<TPublic>(seed)).into_account()
}

fn get_account_id_from_address(address: &str) -> AccountId32 {
	AccountId32::from_ss58check(address).expect("Invalid address")
}

/// Generate the session keys from individual elements.
///
/// The input must be a tuple of individual keys (a single arg for now since we have just one key).
pub fn template_session_keys(keys: AuraId) -> parachain_magnet_runtime::SessionKeys {
	parachain_magnet_runtime::SessionKeys { aura: keys }
}

pub fn development_config() -> ChainSpec {
	// Give your base currency a unit name and decimal places
	let mut properties = sc_chain_spec::Properties::new();
	properties.insert("tokenSymbol".into(), "{{ config.chain_spec_dev_constant.tokenSymbol }}".into());
	properties.insert("tokenDecimals".into(), {{ config.chain_spec_dev_constant.tokenDecimals }}.into());
	properties.insert("ss58Format".into(), {{ config.chain_spec_dev_constant.ss58Format }}.into());

	ChainSpec::builder(
		parachain_magnet_runtime::WASM_BINARY.expect("WASM binary was not built, please build it!"),
		Extensions {
			relay_chain: "{{ config.chain_spec_dev_constant.relay_chain }}".into(),
			// You MUST set this to the correct network!
			para_id: {{config.chain_spec_dev_constant.para_id}},
		},
	)
	.with_name("{{ config.chain_spec_dev_constant.name }}")
	.with_id("{{ config.chain_spec_dev_constant.id }}")
	.with_chain_type(ChainType::Development)
	.with_genesis_config_patch(testnet_genesis(
		// initial collators.
        vec![
            {% for collator in config.chain_spec_dev_constant.collators.accountIdFromSeed -%}
            (
                get_account_id_from_seed::<sr25519::Public>("{{ collator }}"),
                get_collator_keys_from_seed("{{ collator }}"),
            ){% if not loop.last %},{% endif %}
            {% endfor %}
        ],
        vec![
            {% for account in config.chain_spec_dev_constant.endowedAccountsFromSeed -%}
            get_account_id_from_seed::<sr25519::Public>("{{ account }}"){% if not loop.last %},{% endif %}
            {% endfor %}
        ],
		get_account_id_from_seed::<sr25519::Public>("{{ config.chain_spec_dev_constant.rootAccountFromSeed }}"),
		{{ config.chain_spec_dev_constant.para_id }}.into(),
	))
	.with_protocol_id("magnet-dev")
    .with_properties(properties)
	.build()
}

pub fn local_testnet_config() -> ChainSpec {
	// Give your base currency a unit name and decimal places
	let mut properties = sc_chain_spec::Properties::new();
	properties.insert("tokenSymbol".into(), "{{ config.chain_spec_local_testnet_constant.tokenSymbol }}".into());
	properties.insert("tokenDecimals".into(), {{ config.chain_spec_local_testnet_constant.tokenDecimals }}.into());
	properties.insert("ss58Format".into(), {{ config.chain_spec_local_testnet_constant.ss58Format }}.into());

	#[allow(deprecated)]
	ChainSpec::builder(
		parachain_magnet_runtime::WASM_BINARY.expect("WASM binary was not built, please build it!"),
		Extensions {
			relay_chain: "{{ config.chain_spec_local_testnet_constant.relay_chain }}".into(),
			// You MUST set this to the correct network!
			para_id: {{ config.chain_spec_local_testnet_constant.para_id }},
		},
	)
	.with_name("{{ config.chain_spec_local_testnet_constant.name }}")
	.with_id("{{ config.chain_spec_local_testnet_constant.id }}")
	.with_chain_type(ChainType::Local)
	.with_genesis_config_patch(testnet_genesis(
		// initial collators.
        vec![
            {% for collator in config.chain_spec_local_testnet_constant.collators.accountIdFromSeed -%}
            (
                get_account_id_from_seed::<sr25519::Public>("{{ collator }}"),
                get_collator_keys_from_seed("{{ collator }}"),
            ){% if not loop.last %},{% endif %}
            {% endfor %}
        ],
        vec![
            {% for account in config.chain_spec_local_testnet_constant.endowedAccountsFromSeed -%}
            get_account_id_from_seed::<sr25519::Public>("{{ account }}"){% if not loop.last %},{% endif %}
            {% endfor %}
        ],
        get_account_id_from_seed::<sr25519::Public>("{{ config.chain_spec_local_testnet_constant.rootAccountFromSeed }}"),
		{{ config.chain_spec_local_testnet_constant.para_id }}.into(),
	))
	.with_protocol_id("magnet-local")
	.with_properties(properties)
	.build()
}

fn testnet_genesis(
	invulnerables: Vec<(AccountId, AuraId)>,
	endowed_accounts: Vec<AccountId>,
	root: AccountId,
	id: ParaId,
) -> serde_json::Value {
	let alice = get_from_seed::<sr25519::Public>("Alice");
	let bob = get_from_seed::<sr25519::Public>("Bob");

	let op_account1 =
		get_account_id_from_address("5GP7etLvS2VLLfUar7Q2TkQkaxHweYnDvrhh3s5hhf8eorPW");
	let op_account2 =
		get_account_id_from_address("5CFuj7WxZAyinLxoqAJ8NH4yEEVXUUSHi9LRhodC3HyzHvN4");

	let evm_accounts = {
		let mut map = BTreeMap::new();

		{% for account in config.pallet_evm.chain_spec.accounts -%}
        map.insert(
            H160::from_str("{{ account.address }}")
                .expect("internal H160 is valid; qed"),
            fp_evm::GenesisAccount {
                balance: U256::from_str("{{ account.balance }}")
                    .expect("internal U256 is valid; qed"),
                code: {% if account.code == "0x0" %}Default::default(){% else %}vec![{{ account.code | safe }}]{% endif %},
                nonce: {% if account.nonce == "0x0" %}Default::default(){% else %}U256::from({{ account.nonce | safe }}){% endif %},
                storage: Default::default(),
            },
        );
        {% endfor %}
		map
	};

	serde_json::json!({
	    {% if config.pallet_balances -%}
		"balances": {
			"balances": endowed_accounts.iter().cloned().map(|k| (k, {{ config.pallet_balances.chain_spec.endowed_accounts_supply }})).collect::<Vec<_>>(),
		},
		{% endif -%}
		{% if config.pallet_assets -%}
		"assets": {
			"assets": vec![
            {% for asset in config.pallet_assets.chain_spec.assets %}
            (
                {{ asset.AssetsId }},
                get_from_seed::<sr25519::Public>("{{ asset.OwnerFromSeed }}"),
                {{ asset.IsSufficient }},
                {{ asset.MinBalance }}
            ){% if not loop.last %},{% endif %}
            {% endfor %}
			],
			// Genesis metadata: Vec<(id, name, symbol, decimals)>
			"metadata": vec![
            {% for meta in config.pallet_assets.chain_spec.metadata -%}
            (
                {{ meta.AssetsId }},
                b"{{ meta.Name }}".to_vec(),
                b"{{ meta.Symbol }}".to_vec(),
                {{ meta.Decimals }}
            ){% if not loop.last %},{% endif %}
            {% endfor %}
			],
			// Genesis accounts: Vec<(id, account_id, balance)>
			"accounts": vec![
            {% for account in config.pallet_assets.chain_spec.accounts %}
            (
                {{ account.AssetsId }},
                get_from_seed::<sr25519::Public>("{{ account.AccountIdFromSeed }}"),
                {{ account.Balance }}
            ){% if not loop.last %},{% endif %}
            {% endfor -%}
			],
		},
		{% endif %}
		{% if config.pallet_assets_bridge -%}
		"assetsBridge": {
			"adminKey": Some(root.clone()),
		},
		{% endif -%}
		{% if config.pallet_collective -%}
		"council": {
			"members": endowed_accounts
				.iter()
				.enumerate()
				.filter_map(|(idx, acc)| if idx % 2 == 0 { Some(acc.clone()) } else { None })
				.collect::<Vec<_>>(),
		},
		{% endif -%}
		{% if config.parachain_info -%}
		"parachainInfo": {
			"parachainId": {{ config.parachain_info.chain_spec.parachainId }}.into(),
		},
		{% endif -%}
		{% if config.pallet_collator_selection -%}
		"collatorSelection": {
			"invulnerables": invulnerables.iter().cloned().map(|(acc, _)| acc).collect::<Vec<_>>(),
			"candidacyBond": EXISTENTIAL_DEPOSIT * 16,
		},
		{% endif -%}
		{% if config.pallet_session -%}
		"session": {
			"keys": invulnerables
				.into_iter()
				.map(|(acc, aura)| {
					(
						acc.clone(),                 // account id
						acc,                         // validator id
						template_session_keys(aura), // session keys
					)
				})
				.collect::<Vec<_>>(),
		},
		{% endif -%}
		// no need to pass anything to aura, in fact it will panic if we do. Session will take care
		// of this.
		{% if config.pallet_xcm -%}
		"polkadotXcm": {
			"safeXcmVersion": Some(SAFE_XCM_VERSION),
		},
		{% endif -%}
		{% if config.pallet_sudo -%}
		"sudo": { "key": Some(get_account_id_from_seed::<sr25519::Public>("{{ config.pallet_sudo.chain_spec.keyFromSeed }}")) },
		{% endif -%}

		// EVM compatibility
		{% if config.pallet_evm_chain_id -%}
		"evmChainId": {
			"chainId": u64::from(u32::from({{ config.pallet_evm_chain_id.chain_spec.chainId }})),
		},
		{% endif -%}

        {% if config.pallet_evm -%}
		"evm": { "accounts": evm_accounts },
		{% endif %}
		{% if config.pallet_move -%}
		//Move VM
		"moveModule": {
			"changeDefaultMoveStdlibBundleTo": Option::<Vec<u8>>::None,
			"changeDefaultSubstrateStdlibBundleTo": Option::<Vec<u8>>::None,
		},
		{% endif -%}
		{% if config.pallet_bulk -%}
		"bulkPallet":{
			"rpcUrl": b"{{ config.pallet_bulk.chain_spec.rpcUrl }}".to_vec(),
			"genesisHash": U256::from_str("{{ config.pallet_bulk.chain_spec.genesisHash }}").expect("internal U256 is valid; qed")
		},
		{% endif -%}
		{% if config.pallet_liquidation -%}
		"liquidation":{
			"adminKey": Some(root.clone()),
			"systemRatio": {{ config.pallet_liquidation.chain_spec.systemRatio }},
			"treasuryRatio": {{ config.pallet_liquidation.chain_spec.treasuryRatio }},
			"operationRatios": vec![
                {% for ratio in config.pallet_liquidation.chain_spec.operationRatios -%}
                (get_account_id_from_address("{{ ratio.AccountId }}"), {{ ratio.ratio }}){% if not loop.last %},{% endif %}
                {% endfor -%}
			],
			"collatorRatio": {{ config.pallet_liquidation.chain_spec.collatorRatio }},
			"minLiquidationThreshold": {{ config.pallet_liquidation.chain_spec.minLiquidationThreshold }},
			"profitDistributionCycle": {{ config.pallet_liquidation.chain_spec.profitDistributionCycle }},
		}
		{% endif -%}
	})
}
